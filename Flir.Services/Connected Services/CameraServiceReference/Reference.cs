//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Flir.Services.CameraServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CameraServiceReference.ICameraService")]
    public interface ICameraService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/GetCameras", ReplyAction="http://tempuri.org/ICameraService/GetCamerasResponse")]
        Flir.Entities.Camera[] GetCameras();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/GetCameras", ReplyAction="http://tempuri.org/ICameraService/GetCamerasResponse")]
        System.Threading.Tasks.Task<Flir.Entities.Camera[]> GetCamerasAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/ConnectToCamera", ReplyAction="http://tempuri.org/ICameraService/ConnectToCameraResponse")]
        bool ConnectToCamera(int cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/ConnectToCamera", ReplyAction="http://tempuri.org/ICameraService/ConnectToCameraResponse")]
        System.Threading.Tasks.Task<bool> ConnectToCameraAsync(int cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/StartStreaming", ReplyAction="http://tempuri.org/ICameraService/StartStreamingResponse")]
        bool StartStreaming(int cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/StartStreaming", ReplyAction="http://tempuri.org/ICameraService/StartStreamingResponse")]
        System.Threading.Tasks.Task<bool> StartStreamingAsync(int cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/StopStreaming", ReplyAction="http://tempuri.org/ICameraService/StopStreamingResponse")]
        bool StopStreaming(int cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/StopStreaming", ReplyAction="http://tempuri.org/ICameraService/StopStreamingResponse")]
        System.Threading.Tasks.Task<bool> StopStreamingAsync(int cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/DisconnectCamera", ReplyAction="http://tempuri.org/ICameraService/DisconnectCameraResponse")]
        bool DisconnectCamera(int cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/DisconnectCamera", ReplyAction="http://tempuri.org/ICameraService/DisconnectCameraResponse")]
        System.Threading.Tasks.Task<bool> DisconnectCameraAsync(int cameraId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICameraServiceChannel : Flir.Services.CameraServiceReference.ICameraService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CameraServiceClient : System.ServiceModel.ClientBase<Flir.Services.CameraServiceReference.ICameraService>, Flir.Services.CameraServiceReference.ICameraService {
        
        public CameraServiceClient() {
        }
        
        public CameraServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CameraServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CameraServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CameraServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Flir.Entities.Camera[] GetCameras() {
            return base.Channel.GetCameras();
        }
        
        public System.Threading.Tasks.Task<Flir.Entities.Camera[]> GetCamerasAsync() {
            return base.Channel.GetCamerasAsync();
        }
        
        public bool ConnectToCamera(int cameraId) {
            return base.Channel.ConnectToCamera(cameraId);
        }
        
        public System.Threading.Tasks.Task<bool> ConnectToCameraAsync(int cameraId) {
            return base.Channel.ConnectToCameraAsync(cameraId);
        }
        
        public bool StartStreaming(int cameraId) {
            return base.Channel.StartStreaming(cameraId);
        }
        
        public System.Threading.Tasks.Task<bool> StartStreamingAsync(int cameraId) {
            return base.Channel.StartStreamingAsync(cameraId);
        }
        
        public bool StopStreaming(int cameraId) {
            return base.Channel.StopStreaming(cameraId);
        }
        
        public System.Threading.Tasks.Task<bool> StopStreamingAsync(int cameraId) {
            return base.Channel.StopStreamingAsync(cameraId);
        }
        
        public bool DisconnectCamera(int cameraId) {
            return base.Channel.DisconnectCamera(cameraId);
        }
        
        public System.Threading.Tasks.Task<bool> DisconnectCameraAsync(int cameraId) {
            return base.Channel.DisconnectCameraAsync(cameraId);
        }
    }
}
